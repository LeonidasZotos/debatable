Git merge? - completely ignore one branch changes - Stack Overflow Stack Overflow About Products For Teams Stack Overflow Public questions & answers Stack Overflow for Teams Where developers & technologists share private knowledge with coworkers Talent Build your employer brand Advertising Reach developers & technologists worldwide About the company Loading… current community Stack Overflow help chat Meta Stack Overflow your communities Sign up or log in to customize your list. more stack exchange communities company blog Log in Sign up Home Public Questions Tags Users Companies Collectives Explore Collectives Teams Stack Overflow for Teams – Start collaborating and sharing organizational knowledge. Create a free Team Why Teams? Teams Create free Team Collectives™ on Stack Overflow Find centralized, trusted content and collaborate around the technologies you use most. Learn more about Collectives Teams Q&A for work Connect and share knowledge within a single location that is structured and easy to search. Learn more about Teams Git merge? - completely ignore one branch changes Ask Question Asked 4 months ago Modified 4 months ago Viewed 302 times 1 I got a classic situation - master and multiple branches. I need to merge changes (many changes through multiple commits) into master, but I want to ignore any changes that were made in master itself. I want master to be a clone of my branch. I know that I could just checkout every file from branch into master and commit changes, but that won't make graph pretty :) How can I achieve that? Solving merge-conflits is not enough, because there are still some changes that were auto-merged. Do I have to remove them manually or is there some git merge --magic option that could help me? ADD: I'd like files to be exact copy between branch and master (not commit history), but I'd like to have all that squished to single commit. git git-merge Share Improve this question Follow edited Apr 13 at 23:52 mrozo asked Apr 13 at 23:40 mrozomrozo 3355 bronze badges Add a comment | 2 Answers 2 Sorted by: Reset to default Trending sort available Trending sort Trending sort is based off of the default sorting method — by highest score — but it boosts votes that have happened recently, helping to surface more up-to-date answers. It falls back to sorting by highest score if no posts are trending. Switch to Trending sort Highest score (default) Trending (recent votes count more) Date modified (newest first) Date created (oldest first) 3 The answer depends on whether you care about preserving the history of the master branch. If you use a git reset --hard, you'll lose the history of master that diverged from the feature branches. If you want to maintain history, a better trick would be to do it as two merges, with the first merge using the -s ours merge strategy. git checkout feature git merge -s ours master git checkout master git merge --ff-only feature The first merge, git merge -s ours master will create an empty merge commit on feature. The code will be an exact copy of what is on feature. The second merge will fast-forward master to the empty merge commit. The end result will be two branches with the exact same code and preserved histories. The code will be an exact copy of what was on feature prior to the two merges. As far as I know, there isn't a single option/command to perform this operation. -Xtheirs is not truly a merge strategy, it's just an option for the default merge strategy that tells it how to resolve conflicts. git merge -s ours exists specifically for the operation of merging the history of obsolete branches and throwing away the changes. There is no -s theirs strategy. The trick here is that you want to throw away the changes on master, but still keep the branch afterwards. Normally you would just delete the obsolete branch after doing an -s ours merge. Share Improve this answer Follow edited Apr 14 at 0:22 answered Apr 13 at 23:53 TonyArraTonyArra 9,57911 gold badge2727 silver badges4141 bronze badges 4 But then any changes that came from master but weren't tagged as merge conflicts I'd need to remove manually before commit. I've checked theirs already and that was the problem. – mrozo Apr 13 at 23:56 @mrozo ah I see what you're saying. I have an alternate solution, so I'll edit my answer. – TonyArra Apr 14 at 0:05 thank you! I'll check that idea then :) – mrozo Apr 14 at 0:13 @mrozo the method I've suggested Is one that I use for doing releases (merging development branch into main in preparation for a release). – TonyArra Apr 14 at 0:20 Add a comment | 2 The key here is to realize that Git stores snapshots (which Git calls the tree of a commit). There are no changes in any commit, just a snapshot and some metadata. If you see changes, that's an illusion brought about by taking two commits and comparing them. Think about an old style movie film: each frame of the film holds a snapshot image, frozen in time, and we only see movement because we look at 24 carefully-sequenced frames every second. What this means is that you can construct a commit "by hand" at any time if you like. If you want the snapshot of commit a123456 to be the next snapshot on the current branch, you simply make a new commit whose parent is the current commit, but whose tree is from commit a123456: git commit-tree -m "insert your message here" -p HEAD -p a123456 a123456^{tree} or similar. The two -p arguments here make this a merge commit, so that this is the result of the missing -s theirs merge strategy. This new commit—Git prints its hash ID to stdout; you must grab it from there—is not yet on any branch, so you now need to update the current branch name, using git merge --ff-only or git update-ref. See jthill's answer to Is there a "theirs" version of "git merge -s ours"? (note that the question itself is now a bit confused due to December 2008 edit to the original October 2008 question, and some answers are about -X theirs, which is different). Share Improve this answer Follow edited Apr 14 at 13:29 answered Apr 14 at 0:52 torektorek 401k4949 gold badges549549 silver badges688688 bronze badges 3 nice - I hadn't seen this before. It has the bonus of not actually affecting the topic branch. – TonyArra Apr 14 at 1:35 ~~@torek that's a great solution, but after I did git commit-tree as you presented, git merge --ff-only returns "Already up to date." And calling git update-ref return help-page. I also don't see any changes in git log after all doing all of that.~~ EDIT I didn't notice that git commit-tree returned new commit number, my mistake, sorry for ping :) Everything is great now :) – mrozo Apr 14 at 12:46 2 @mrozo: added a note about that. You should click through to jthill's answer though. – torek Apr 14 at 13:30 Add a comment | Your Answer Thanks for contributing an answer to Stack Overflow!Please be sure to answer the question. Provide details and share your research!But avoid …Asking for help, clarification, or responding to other answers.Making statements based on opinion; back them up with references or personal experience.To learn more, see our tips on writing great answers. Draft saved Draft discarded Sign up or log in Sign up using Google Sign up using Facebook Sign up using Email and Password Submit Post as a guest Name Email Required, but never shown Post as a guest Name Email Required, but never shown Post Your Answer Discard By clicking “Post Your Answer”, you agree to our terms of service, privacy policy and cookie policy Not the answer you're looking for? Browse other questions tagged git git-merge or ask your own question. The Overflow Blog Will low and no code tools ever truly disrupt tech development? A conversation with Spencer Kimball, creator of GIMP and CockroachDB (Ep. 472) Featured on Meta Recent site instability, major outages – July/August 2022 Announcing Design Accessibility Updates on SO Staging Ground Workflow: Question Lifecycle The [master] tag is being burninated Linked 1049 Is there a "theirs" version of "git merge -s ours"? Related 5812 How do I discard unstaged changes in Git? 3910 Undoing a git rebase 5229 How do I resolve merge conflicts in a Git repository? 6055 Move the most recent commit(s) to a new branch with Git 7997 How do I check out a remote Git branch? 19425 How do I delete a Git branch locally and remotely? 4628 Undo a Git merge that hasn't been pushed yet 2523 How do I safely merge a Git branch into master? 10640 How do I rename a local Git branch? 1686 Can I delete a git commit but keep the changes? Hot Network Questions Does God ever answer prayers from non-believers? How is that possible that a same song is presented as 3 different scores? Movement of stars over long periods of time Can Positive Values of Observations imply Population Positive Mean? Definition of mineralisation in context of organic chemistry mv: A and B are the same file Using spherical stones for cannon practice Did Barack Obama keep 33 million pages of documents, including nuclear weapons documents? In which (if any) Star Trek episodes does that show’s captain not appear? Usage of の in 食い放題の飲み放題 Does a time-varying electric field, which is produced by a time-varying magnetic field, itself induce an other magnetic field? Are nested flight itineraries permitted and feasible? How do I play what looks like a double legato? Seeing the queen's lasers What is the logical status of the sentence combining the ideas of Löb and Rosser, "this sentence is provable before any proof of its negation"? Improving progress bar code (10 years latter) Are Windows WSL2 "distributions" just docker containers under the hood? Why does it take longer for food to bake when the oven is full? How jet engines generate electrical power? How to add gain to this op-amp based precision full wave rectifier? Patching things up with advisor One circuit in house losing voltage I Have a Problem with Premature Yanking Scientific stance on 'life from non-life, naturally'? more hot questions Question feed Subscribe to RSS Question feed To subscribe to this RSS feed, copy and paste this URL into your RSS reader. Stack Overflow Questions Help Products Teams Advertising Collectives Talent Company About Press Work Here Legal Privacy Policy Terms of Service Contact Us Cookie Settings Cookie Policy Stack Exchange Network Technology Culture & recreation Life & arts Science Professional Business API Data Blog Facebook Twitter LinkedIn Instagram Site design / logo © 2022 Stack Exchange Inc; user contributions licensed under CC BY-SA. rev 2022.8.12.42806 Your privacy By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy. Accept all cookies Customize settings